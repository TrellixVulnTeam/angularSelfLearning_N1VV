{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { baseURL } from '../shared/baseurl';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./process-httpmsg.service\";\nexport let LeaderService = /*#__PURE__*/(() => {\n  class LeaderService {\n    constructor(http, processHTTPMsgService) {\n      this.http = http;\n      this.processHTTPMsgService = processHTTPMsgService;\n    }\n\n    getLeaders() {\n      //return of(LEADERS).pipe(delay(2000));\n      return this.http.get(baseURL + 'leadership').pipe(catchError(this.processHTTPMsgService.handleError));\n    }\n\n    getLeader(id) {\n      //return of(LEADERS.filter((t) => (t.id === id))[0]).pipe(delay(2000));\n      return this.http.get(baseURL + 'leadership/' + id).pipe(catchError(this.processHTTPMsgService.handleError));\n    }\n\n    getFeaturedLeader() {\n      //return of(LEADERS.filter(d => d.featured)[0]).pipe(delay(2000));\n      return this.http.get(baseURL + 'leadership?featured=true').pipe(map(leaders => leaders[0])).pipe(catchError(this.processHTTPMsgService.handleError));\n    }\n\n  }\n\n  LeaderService.ɵfac = function LeaderService_Factory(t) {\n    return new (t || LeaderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ProcessHTTPMsgService));\n  };\n\n  LeaderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LeaderService,\n    factory: LeaderService.ɵfac,\n    providedIn: 'root'\n  });\n  return LeaderService;\n})();","map":null,"metadata":{},"sourceType":"module"}